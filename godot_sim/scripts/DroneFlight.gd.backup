@tool
extends AeroBody3D
class_name DroneFlight

# Drone Flight Physics - Using aerodynamic physics plugin for realistic flight simulation

signal rotor_speed_changed(rotor_index: int, speed: float)
signal flight_mode_changed(mode: String)

enum FlightMode {
	MANUAL,
	STABILIZE,
	ALTITUDE_HOLD,
	LOITER,
	RTL  # Return to Launch
}

@export_group("Drone Configuration")
@export var rotor_count: int = 4
@export var rotor_spacing: float = 0.5  # Distance from center to rotor
@export var max_rotor_speed: float = 1000.0  # RPM
@export var rotor_response_time: float = 0.2  # Time to reach target speed

@export_group("Flight Parameters")
@export var hover_throttle: float = 0.5  # Throttle needed to hover
@export var max_tilt_angle: float = 30.0  # Maximum tilt in degrees
@export var max_yaw_rate: float = 180.0  # Max yaw rate in degrees/second
@export var max_climb_rate: float = 5.0  # Max climb rate in m/s

@export_group("Stability")
@export var stability_factor: float = 2.0  # How aggressively to stabilize
@export var auto_level: bool = true  # Automatically level when no input
@export var altitude_hold_enabled: bool = false
@export var target_altitude: float = 0.0

@export_group("Control Input")
@export var pitch_input: float = 0.0  # -1 to 1 (forward/backward)
@export var roll_input: float = 0.0   # -1 to 1 (left/right)
@export var yaw_input: float = 0.0    # -1 to 1 (rotate left/right)
@export var throttle_input: float = 0.0  # 0 to 1 (up/down)

# Flight state
var current_flight_mode: FlightMode = FlightMode.STABILIZE
var rotor_speeds: Array[float] = []
var target_rotor_speeds: Array[float] = []
var rotors: Array[AeroThrusterComponent] = []
var stability_surfaces: Array[AeroSurface3D] = []

# PID controllers for stability
var pitch_pid: PID
var roll_pid: PID
var yaw_pid: PID
var altitude_pid: PID

# AI interface variables
var target_position: Vector3 = Vector3.ZERO
var simple_target_tracking: bool = true  # Enable simple target tracking mode

# Internal state
var hover_detected: bool = false
var ground_effect_height: float = 1.0
var target_attitude: Vector3 = Vector3.ZERO

func _init():
	super._init()
	# Initialize rotor speed arrays
	rotor_speeds.resize(rotor_count)
	target_rotor_speeds.resize(rotor_count)
	for i in range(rotor_count):
		rotor_speeds[i] = 0.0
		target_rotor_speeds[i] = 0.0

func _ready():
	super._ready()
	print("DroneFlight initialized with ", rotor_count, " rotors")
	
	# Add to drones group for GameManager to find
	add_to_group("drones")
	
	# Set up drone-specific physics properties
	mass = 2.5  # 2.5kg drone
	
	# Initialize PID controllers
	_setup_pid_controllers()
	
	# Set up rotors and surfaces
	_setup_rotors()
	_setup_stability_surfaces()
	
	# Configure aerodynamics
	show_debug = false  # Enable for debugging
	
	# Test override warnings
	test_ready_override = true

func _setup_pid_controllers():
	"""Initialize PID controllers for stable flight"""
	# Create PID resources
	pitch_pid = PID.new()
	pitch_pid.p = 2.0
	pitch_pid.i = 0.1
	pitch_pid.d = 0.5
	
	roll_pid = PID.new()
	roll_pid.p = 2.0
	roll_pid.i = 0.1
	roll_pid.d = 0.5
	
	yaw_pid = PID.new()
	yaw_pid.p = 1.0
	yaw_pid.i = 0.05
	yaw_pid.d = 0.2
	
	altitude_pid = PID.new()
	altitude_pid.p = 1.0
	altitude_pid.i = 0.1
	altitude_pid.d = 0.3

func _setup_rotors():
	"""Create and position rotor thrusters"""
	rotors.clear()
	
	# Remove existing rotors if any
	for child in get_children():
		if child is AeroThrusterComponent:
			child.queue_free()
	
	# Create rotors in quadcopter configuration
	var rotor_positions = _get_rotor_positions()
	
	for i in range(rotor_count):
		var rotor = AeroThrusterComponent.new()
		rotor.name = "Rotor_" + str(i)
		rotor.max_thrust_force = 15.0  # Newtons per rotor
		rotor.enabled = true
		rotor.get_throttle_from_aero_body = false  # We'll control individually
		
		# Position rotor
		rotor.position = rotor_positions[i]
		
		# Point rotor upward (thrust downward creates lift)
		rotor.rotation_degrees = Vector3(0, 0, 0)
		
		add_child(rotor)
		rotors.append(rotor)
	
	print("Created ", rotors.size(), " rotors")

func _get_rotor_positions() -> Array[Vector3]:
	"""Get positions for rotors based on configuration"""
	var positions: Array[Vector3] = []
	
	match rotor_count:
		4:  # Quadcopter - X configuration
			positions = [
				Vector3(rotor_spacing, 0, -rotor_spacing),   # Front-right
				Vector3(-rotor_spacing, 0, -rotor_spacing),  # Front-left
				Vector3(-rotor_spacing, 0, rotor_spacing),   # Rear-left
				Vector3(rotor_spacing, 0, rotor_spacing)     # Rear-right
			]
		6:  # Hexacopter
			for i in range(6):
				var angle = i * PI / 3.0
				positions.append(Vector3(
					cos(angle) * rotor_spacing,
					0,
					sin(angle) * rotor_spacing
				))
		_:  # Default to quadcopter
			positions = _get_rotor_positions()
			rotor_count = 4
	
	return positions

func _setup_stability_surfaces():
	"""Create small aerodynamic surfaces for stability"""
	stability_surfaces.clear()
	
	# Remove existing surfaces
	for child in get_children():
		if child is AeroSurface3D:
			child.queue_free()
	
	# Create small stabilizing surfaces (like fins)
	var surface_positions = [
		Vector3(0, 0, -rotor_spacing * 1.2),  # Front
		Vector3(0, 0, rotor_spacing * 1.2),   # Rear
		Vector3(-rotor_spacing * 1.2, 0, 0), # Left
		Vector3(rotor_spacing * 1.2, 0, 0)   # Right
	]
	
	for i in range(4):
		var surface = AeroSurface3D.new()
		surface.name = "StabilitySurface_" + str(i)
		
		# Create small wing config
		var config = AeroSurfaceConfig.new()
		config.chord = 0.1
		config.span = 0.1
		config.aspect_ratio = 1.0
		config.lift_curve_slope = 5.0
		config.zero_lift_drag = 0.02
		config.induced_drag_factor = 0.8
		
		surface.wing_config = config
		surface.position = surface_positions[i]
		
		# Orient surfaces properly
		if i == 0 or i == 1:  # Front/rear - vertical fins
			surface.rotation_degrees = Vector3(0, 0, 90)
		else:  # Left/right - horizontal fins
			surface.rotation_degrees = Vector3(90, 0, 0)
		
		surface.show_lift = false
		surface.show_drag = false
		
		add_child(surface)
		stability_surfaces.append(surface)
	
	print("Created ", stability_surfaces.size(), " stability surfaces")

func _physics_process(delta: float):
	super._physics_process(delta)
	
	# Simple target tracking if enabled
	if simple_target_tracking and target_position != Vector3.ZERO:
		_simple_target_tracking(delta)
	
	# Update flight systems
	_update_flight_control(delta)
	_update_rotor_speeds(delta)
	_detect_flight_state()

func _integrate_forces(state: PhysicsDirectBodyState3D):
	super._integrate_forces(state)
	
	test_integrate_forces_override = true
	
	# Apply additional drone-specific forces
	_apply_ground_effect(state)
	_apply_gyroscopic_effects(state)

func _update_flight_control(delta: float):
	"""Main flight control logic"""
	match current_flight_mode:
		FlightMode.MANUAL:
			_manual_flight_control()
		FlightMode.STABILIZE:
			_stabilized_flight_control(delta)
		FlightMode.ALTITUDE_HOLD:
			_altitude_hold_control(delta)
		FlightMode.LOITER:
			_loiter_control(delta)
		FlightMode.RTL:
			_return_to_launch_control(delta)

func _manual_flight_control():
	"""Direct control - no stabilization"""
	var base_throttle = throttle_input * hover_throttle
	
	# Calculate rotor mix for manual control
	_calculate_rotor_mix(
		base_throttle,
		pitch_input * 0.3,
		roll_input * 0.3,
		yaw_input * 0.3
	)

func _stabilized_flight_control(delta: float):
	"""Stabilized flight with attitude hold"""
	var current_rotation = rotation_degrees
	
	# Calculate desired attitude from input
	var desired_pitch = pitch_input * max_tilt_angle
	var desired_roll = roll_input * max_tilt_angle
	var _desired_yaw_rate = yaw_input * max_yaw_rate
	
	# Auto-level when no input
	if auto_level:
		if abs(pitch_input) < 0.1:
			desired_pitch = 0.0
		if abs(roll_input) < 0.1:
			desired_roll = 0.0
	
	# PID control for attitude
	var pitch_correction = pitch_pid.update(desired_pitch - current_rotation.x, delta)
	var roll_correction = roll_pid.update(desired_roll - current_rotation.z, delta)
	var yaw_correction = yaw_input * 0.5  # Direct yaw control
	
	# Base throttle with altitude component
	var base_throttle = hover_throttle + (throttle_input * 0.5)
	
	# Calculate rotor mix with corrections
	_calculate_rotor_mix(
		base_throttle,
		pitch_correction * 0.3,
		roll_correction * 0.3,
		yaw_correction
	)

func _altitude_hold_control(delta: float):
	"""Altitude hold with stabilization"""
	_stabilized_flight_control(delta)
	
	if altitude_hold_enabled:
		var altitude_error = target_altitude - position.y
		var altitude_correction = altitude_pid.update(altitude_error, delta)
		
		# Apply altitude correction to all rotors
		for i in range(rotor_count):
			target_rotor_speeds[i] += altitude_correction * 0.1

func _loiter_control(delta: float):
	"""Position hold (loiter) mode"""
	# This would include GPS position hold
	_altitude_hold_control(delta)
	# TODO: Add position hold logic

func _return_to_launch_control(delta: float):
	"""Return to launch mode"""
	# This would navigate back to launch position
	_altitude_hold_control(delta)
	# TODO: Add RTL navigation logic

func _calculate_rotor_mix(base_throttle: float, pitch: float, roll: float, yaw: float):
	"""Calculate individual rotor speeds for desired motion"""
	# Quadcopter mixing logic
	# Rotor layout: 0=FR, 1=FL, 2=RL, 3=RR
	# Rotation: CW for 0,2 and CCW for 1,3 (to cancel torque)
	
	if rotor_count >= 4:
		target_rotor_speeds[0] = base_throttle + pitch - roll + yaw  # Front-right
		target_rotor_speeds[1] = base_throttle + pitch + roll - yaw  # Front-left
		target_rotor_speeds[2] = base_throttle - pitch + roll + yaw  # Rear-left
		target_rotor_speeds[3] = base_throttle - pitch - roll - yaw  # Rear-right
	
	# Clamp speeds to valid range
	for i in range(rotor_count):
		target_rotor_speeds[i] = clamp(target_rotor_speeds[i], 0.0, 1.0)

func _update_rotor_speeds(delta: float):
	"""Update actual rotor speeds toward targets"""
	for i in range(rotor_count):
		if i < rotors.size():
			# Smooth speed changes
			var speed_diff = target_rotor_speeds[i] - rotor_speeds[i]
			var speed_change = speed_diff * (delta / rotor_response_time)
			rotor_speeds[i] += speed_change
			rotor_speeds[i] = clamp(rotor_speeds[i], 0.0, 1.0)
			
			# Apply to rotor
			rotors[i].throttle = rotor_speeds[i]
			
			# Emit signal for visual/audio feedback
			rotor_speed_changed.emit(i, rotor_speeds[i])

func _detect_flight_state():
	"""Detect current flight state"""
	var total_rotor_speed = 0.0
	for speed in rotor_speeds:
		total_rotor_speed += speed
	
	hover_detected = (total_rotor_speed > hover_throttle * rotor_count * 0.8 and 
					  linear_velocity.length() < 2.0)

func _apply_ground_effect(state: PhysicsDirectBodyState3D):
	"""Apply ground effect - increased lift near ground"""
	var height_above_ground = position.y
	
	if height_above_ground < ground_effect_height:
		var ground_effect_factor = 1.0 + (0.2 * (1.0 - height_above_ground / ground_effect_height))
		# This would be applied to lift surfaces, but for simplicity we'll add upward force
		var ground_effect_force = Vector3.UP * mass * 2.0 * ground_effect_factor
		state.apply_central_force(ground_effect_force)

func _apply_gyroscopic_effects(state: PhysicsDirectBodyState3D):
	"""Apply gyroscopic effects from spinning rotors"""
	# Simplified gyroscopic effect
	var total_angular_momentum = Vector3.ZERO
	
	for i in range(rotor_count):
		var rotor_angular_vel = rotor_speeds[i] * max_rotor_speed
		# Alternate rotor directions to cancel torque
		var direction = 1.0 if (i % 2 == 0) else -1.0
		total_angular_momentum.y += rotor_angular_vel * direction * 0.1
	
	# Apply small torque from rotor imbalance
	state.apply_torque(total_angular_momentum * 0.01)

# Public interface for AI control
func set_flight_mode(mode: FlightMode):
	"""Set flight mode"""
	if current_flight_mode != mode:
		current_flight_mode = mode
		flight_mode_changed.emit(FlightMode.keys()[mode])
		print("Flight mode changed to: ", FlightMode.keys()[mode])

func set_control_input(pitch: float, roll: float, yaw: float, throttle: float):
	"""Set control inputs from AI or external controller"""
	pitch_input = clamp(pitch, -1.0, 1.0)
	roll_input = clamp(roll, -1.0, 1.0)
	yaw_input = clamp(yaw, -1.0, 1.0)
	throttle_input = clamp(throttle, 0.0, 1.0)

func enable_altitude_hold(enable: bool, target_alt: float = 0.0):
	"""Enable or disable altitude hold"""
	altitude_hold_enabled = enable
	if enable:
		target_altitude = target_alt if target_alt != 0.0 else position.y
		set_flight_mode(FlightMode.ALTITUDE_HOLD)
	else:
		set_flight_mode(FlightMode.STABILIZE)

func get_flight_status() -> Dictionary:
	"""Get current flight status"""
	return {
		"flight_mode": FlightMode.keys()[current_flight_mode],
		"hovering": hover_detected,
		"altitude": position.y,
		"attitude": rotation_degrees,
		"velocity": linear_velocity,
		"rotor_speeds": rotor_speeds.duplicate(),
		"ground_effect": position.y < ground_effect_height,
		"throttle_input": throttle_input,
		"control_input": {
			"pitch": pitch_input,
			"roll": roll_input,
			"yaw": yaw_input,
			"throttle": throttle_input
		}
	}

func emergency_shutdown():
	"""Emergency stop - cut all rotors"""
	for i in range(rotor_count):
		target_rotor_speeds[i] = 0.0
		rotor_speeds[i] = 0.0
		if i < rotors.size():
			rotors[i].throttle = 0.0
	
	print("EMERGENCY SHUTDOWN - All rotors stopped")

# Debug functions
func _on_debug_changed():
	"""Update debug visualization"""
	for surface in stability_surfaces:
		surface.show_lift = show_debug
		surface.show_drag = show_debug

# PID Controller reference
const PID = preload("res://addons/godot_aerodynamic_physics/utils/pid.gd") 

func _simple_target_tracking(delta: float):
	"""Simple target tracking - convert target position to control inputs"""
	var position_error = target_position - position
	var distance_to_target = position_error.length()
	
	# Don't move if very close to target
	if distance_to_target < 0.5:
		pitch_input = 0.0
		roll_input = 0.0
		throttle_input = 0.0
		return
	
	# Convert 3D position error to control inputs
	var direction = position_error.normalized()
	
	# Pitch (forward/backward) - Z component
	pitch_input = clamp(-direction.z * 0.5, -1.0, 1.0)
	
	# Roll (left/right) - X component  
	roll_input = clamp(direction.x * 0.5, -1.0, 1.0)
	
	# Throttle based on altitude difference
	var altitude_error = target_position.y - position.y
	if altitude_error > 0.5:
		throttle_input = 0.3  # Climb
	elif altitude_error < -0.5:
		throttle_input = -0.3  # Descend
	else:
		throttle_input = 0.0  # Maintain altitude
	
	# Yaw to face target (optional)
	var target_direction_2d = Vector2(direction.x, direction.z)
	var current_direction_2d = Vector2(-sin(rotation.y), -cos(rotation.y))
	var yaw_error = target_direction_2d.angle_to(current_direction_2d)
	yaw_input = clamp(yaw_error * 0.5, -1.0, 1.0) 

func set_target_position(pos: Vector3):
	"""Set target position for simple tracking"""
	target_position = pos
	print("Target set to: ", pos)

func enable_simple_tracking(enable: bool):
	"""Enable or disable simple target tracking"""
	simple_target_tracking = enable
	print("Simple target tracking: ", "enabled" if enable else "disabled") 
